{"address":"ct_2NW3u11koGhvUarSwYoVoksYWrmVesY8aYEhns5t2yF4MacZWs","bytecode":"cb_+QItRgOgZJB42NcecwcePru8Nl+e85bPUNUyECAFsMY37h+SisDAuQH/uQGR/kTWRB8ANwGXKDcAVQKCGg6ELwAaBoYAAQM//oSJbQAANwCXKAEChv6Q41dQAjcANwBVACAgggcMBPsDXU9OTFlfT1dORVJfQ0FMTF9BTExPV0VEAQM//q0oNG8ANwGXKDcAAgMRkONXUA8Cb4ImzxoGhgABAz/+s4iAPwA3CJdAlyhHAJcoRwAHB5dvATcAGgoAhCzYAAB/IDB/BwwE+wNdU3dhcCBzaG91bGQgbm90IGJlIHVzZWSABgYEPAQEHABBBggCQRoKCAY8BAgcAEEKDAo7BAocAEEKDgw7BAwcAEEKEA4cChIQIBgSAAcMCPsDUVN3YXBfaWQgaXMgbm90IHZhbGlkDAEODAKGDAEAAgMR2+dyln4ABwwO+wNZU2lnbmF0dXJlIGlzIG5vdCB2YWxpZAwBCgwBCAwDAAwCBgMA/BHP3ZqiNwJHAAc3AA8Cb4Imzy3ahIQA/wEDP/7b53KWADcBl0CXQEEcnwFxGUV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOgozMgAbAAC4Zi8GEUTWRB8RaW5pdBGEiW0AKWdldF9vcmFjbGURkONXUE0uR2F0ZS5yZXF1aXJlX293bmVyEa0oNG8pc2V0X29yYWNsZRGziIA/FWNsYWltEdvncpZBZ2V0X3Vuc2lnbmVkX21zZ4IvAIU2LjEuMACuxh3u","aci":{"encodedAci":{"contract":{"functions":[{"arguments":[{"name":"_oracle","type":{"bytes":20}}],"name":"init","payable":false,"returns":"Gate.state","stateful":false},{"arguments":[{"name":"_oracle","type":{"bytes":20}}],"name":"set_oracle","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[],"name":"get_oracle","payable":false,"returns":{"bytes":20},"stateful":true},{"arguments":[{"name":"data","type":"hash"}],"name":"get_unsigned_msg","payable":false,"returns":"hash","stateful":false},{"arguments":[{"name":"swapId","type":"hash"},{"name":"fromToken","type":{"bytes":20}},{"name":"toToken","type":"address"},{"name":"sender","type":{"bytes":20}},{"name":"recipient","type":"address"},{"name":"amount","type":"int"},{"name":"nonce","type":"int"},{"name":"signature","type":{"bytes":65}}],"name":"claim","payable":false,"returns":{"tuple":[]},"stateful":true}],"kind":"contract_main","name":"Gate","payable":false,"state":{"record":[{"name":"owner","type":"address"},{"name":"usedSwaps","type":"Gate.usedSwaps"},{"name":"oracle","type":{"bytes":20}}]},"type_defs":[{"name":"usedSwaps","typedef":{"map":["hash","bool"]},"vars":[]}]}},"externalEncodedAci":[{"namespace":{"name":"ListInternal","type_defs":[]}},{"namespace":{"name":"List","type_defs":[]}},{"namespace":{"name":"String","type_defs":[]}},{"namespace":{"name":"Pair","type_defs":[]}},{"contract":{"event":{"variant":[{"Transfer":["address","address","int"]},{"Allowance":["address","address","int"]},{"Burn":["address","int"]},{"Mint":["address","int"]},{"Swap":["address","int"]},{"NewOwner":["address"]}]},"functions":[{"arguments":[],"name":"aex9_extensions","payable":false,"returns":{"list":["string"]},"stateful":false},{"arguments":[],"name":"meta_info","payable":false,"returns":"FungibleTokenInterface.meta_info","stateful":false},{"arguments":[],"name":"total_supply","payable":false,"returns":"int","stateful":false},{"arguments":[],"name":"owner","payable":false,"returns":"address","stateful":false},{"arguments":[],"name":"balances","payable":false,"returns":{"map":["address","int"]},"stateful":false},{"arguments":[{"name":"_1","type":"address"}],"name":"balance","payable":false,"returns":{"option":["int"]},"stateful":false},{"arguments":[{"name":"_1","type":"FungibleTokenInterface.allowance_accounts"}],"name":"allowance","payable":false,"returns":{"option":["int"]},"stateful":false},{"arguments":[{"name":"_1","type":"address"},{"name":"_2","type":"address"},{"name":"_3","type":"int"}],"name":"transfer_allowance","payable":false,"returns":"unit","stateful":true},{"arguments":[{"name":"_1","type":"address"},{"name":"_2","type":"int"}],"name":"transfer","payable":false,"returns":"unit","stateful":true},{"arguments":[{"name":"_1","type":"address"},{"name":"_2","type":"int"}],"name":"mint","payable":false,"returns":"unit","stateful":true}],"kind":"contract_interface","name":"FungibleTokenInterface","payable":false,"type_defs":[{"name":"meta_info","typedef":{"record":[{"name":"name","type":"string"},{"name":"symbol","type":"string"},{"name":"decimals","type":"int"}]},"vars":[]},{"name":"allowance_accounts","typedef":{"record":[{"name":"from_account","type":"address"},{"name":"for_account","type":"address"}]},"vars":[]}]}}],"interface":"\n\n\n\ncontract interface FungibleTokenInterface =\n  datatype event = Transfer(address, address, int) | Allowance(address, address, int) | Burn(address, int) | Mint(address, int) | Swap(address, int) | NewOwner(address)\n  record meta_info = {name : string,symbol : string,decimals : int}\n  record allowance_accounts = {from_account : address,for_account : address}\n  entrypoint aex9_extensions : () => list(string)\n  entrypoint meta_info : () => FungibleTokenInterface.meta_info\n  entrypoint total_supply : () => int\n  entrypoint owner : () => address\n  entrypoint balances : () => map(address, int)\n  entrypoint balance : (address) => option(int)\n  entrypoint allowance : (FungibleTokenInterface.allowance_accounts) => option(int)\n  stateful entrypoint transfer_allowance : (address, address, int) => unit\n  stateful entrypoint transfer : (address, int) => unit\n  stateful entrypoint mint : (address, int) => unit\n\nmain contract Gate =\n  record state = {owner : address,usedSwaps : Gate.usedSwaps,oracle : bytes(20)}\n  type usedSwaps = map(hash, bool)\n  entrypoint init : (bytes(20)) => Gate.state\n  stateful entrypoint set_oracle : (bytes(20)) => unit\n  stateful entrypoint get_oracle : () => bytes(20)\n  entrypoint get_unsigned_msg : (hash) => hash\n  stateful entrypoint claim : (hash, bytes(20), address, bytes(20), address, int, int, bytes(65)) => unit\n"}}
