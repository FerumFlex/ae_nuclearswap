{"address":"ct_9rPBQUmEsCoBWpSSU2dWB2qAYA9u71AcjY5vDoziS14LTtd7Z","bytecode":"cb_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V0VEAQM//pt1rlICNwGXQDcAGgoAhlUAKxgAACgMBCMABwwWBgMEGgoGhisYBgAoDBAHDBQGAwgaCgyGKxgMACgMDgcMEgYDDBoKEoZYACsYEgAoDAwfAAcMEAEDP/sDiXJlZnVuZGFibGU6IGVuZHRpbWUgbm90IHlldCBwYXNzZWT7A3VyZWZ1bmRhYmxlOiBhbHJlYWR5IHdpdGhkcmF3bvsDcXJlZnVuZGFibGU6IGFscmVhZHkgcmVmdW5kZWT7A1lyZWZ1bmRhYmxlOiBub3Qgc2VuZGVy/p+yJCsCNwP39/f3OhQCBAD+o18bvwA3AZdAhwI3ADcBNwpHApcoRwCXKAcHBxcXhwI3ADcBl28BGgoAhi8YhgAHDAQBA6+CAAEAPysYAABE/CMAAgICAP6r6Z4+ADcBl0AXLxiGAAD+rSg0bwA3AZcoNwACAxGQ41dQDwJvgibPGgaKAAwBAET8YwQCBAQEAgoCBAMRZaXgD/6ziIA/ADcIl0CXKEcAlyhHAAcHl28BNwAaCgCELNgAAH8gMH8HDAT7A11Td2FwIHNob3VsZCBub3QgYmUgdXNlZIAGBgQ8BAQcAEEGCAJBGgoIBjwECBwAQQoMCjsEChwAQQoODDsEDBwAQQoQDhwKEhAgGBIABwwI+wNRU3dhcF9pZCBpcyBub3QgdmFsaWQMAQ4MAooMAQACAxHb53KWfgAHDA77A1lTaWduYXR1cmUgaXMgbm90IHZhbGlkDAEKDAEIDAMADAIGAwD8Ec/dmqI3AkcABzcADwJvgibPLdqEhAD/AQM//tvncpYANwGXQJdAQRyfAXEZRXRoZXJldW0gU2lnbmVkIE1lc3NhZ2U6CjMyABsAALkBhi8WESAEpNg9LlN0cmluZy5jb25jYXRzEScAWkMtaGF2ZV9icmlkZ2UROlGqI2EuR2F0ZS5jaGVja193aXRoZHJhd2FibGURRNZEHxFpbml0EUqvo0MRZnVuZBFLGcPPUS5HYXRlLmZ1dHVyZV9lbmR0aW1lEVtpEh41cmVtb3ZlX2JyaWRnZRFcYgKyKWFkZF9icmlkZ2URXnfhJS0uTGlzdC5mb2xkbBFlpeAPLUNoYWluLmV2ZW50EXJd/xM1Z2V0X2JyaWRnZV9pZBGByo+hEXNpZ24RhIltAClnZXRfb3JhY2xlEYegtL0tZnVuZF9jYW5jZWwRkONXUE0uR2F0ZS5yZXF1aXJlX293bmVyEZt1rlJZLkdhdGUuY2hlY2tfcmVmdW5kYWJsZRGfsiQrGS5eMTIzNxGjXxu/IWdldF9zd2FwEavpnj4laGF2ZV9zd2FwEa0oNG8pc2V0X29yYWNsZRGziIA/FWNsYWltEdvncpZBZ2V0X3Vuc2lnbmVkX21zZ4IvAIU2LjEuMAAip0TP","aci":{"encodedAci":{"contract":{"event":{"variant":[{"FundEvent":["hash","string"]},{"FundCancelEvent":["hash"]},{"SwapSigned":["hash",{"bytes":65}]},{"NewBridge":["address",{"bytes":20}]},{"RemoveBridge":["address",{"bytes":20}]},{"NewOracleEvent":[{"bytes":20}]}]},"functions":[{"arguments":[{"name":"_oracle","type":{"bytes":20}}],"name":"init","payable":false,"returns":"Gate.state","stateful":false},{"arguments":[{"name":"_oracle","type":{"bytes":20}}],"name":"set_oracle","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[],"name":"get_oracle","payable":false,"returns":{"bytes":20},"stateful":true},{"arguments":[{"name":"data","type":"hash"}],"name":"get_unsigned_msg","payable":false,"returns":"hash","stateful":false},{"arguments":[{"name":"swapId","type":"hash"},{"name":"fromToken","type":{"bytes":20}},{"name":"toToken","type":"address"},{"name":"sender","type":{"bytes":20}},{"name":"recipient","type":"address"},{"name":"amount","type":"int"},{"name":"nonce","type":"int"},{"name":"signature","type":{"bytes":65}}],"name":"claim","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"fromToken","type":"FungibleTokenInterface"},{"name":"toToken","type":{"bytes":20}},{"name":"recipient","type":{"bytes":20}},{"name":"amount","type":"int"},{"name":"nonce","type":"int"},{"name":"endtime","type":"int"}],"name":"fund","payable":false,"returns":"hash","stateful":true},{"arguments":[{"name":"swapId","type":"hash"}],"name":"fund_cancel","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"swapId","type":"hash"},{"name":"signature","type":{"bytes":65}}],"name":"sign","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"swap_id","type":"hash"}],"name":"get_swap","payable":false,"returns":{"option":["Gate.swap"]},"stateful":false},{"arguments":[{"name":"swap_id","type":"hash"}],"name":"have_swap","payable":false,"returns":"bool","stateful":false},{"arguments":[{"name":"fromToken","type":"FungibleTokenInterface"},{"name":"toToken","type":{"bytes":20}}],"name":"get_bridge_id","payable":false,"returns":"hash","stateful":true},{"arguments":[{"name":"bridge_id","type":"hash"}],"name":"have_bridge","payable":false,"returns":"bool","stateful":true},{"arguments":[{"name":"fromToken","type":"FungibleTokenInterface"},{"name":"toToken","type":{"bytes":20}}],"name":"add_bridge","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"fromToken","type":"FungibleTokenInterface"},{"name":"toToken","type":{"bytes":20}}],"name":"remove_bridge","payable":false,"returns":{"tuple":[]},"stateful":true}],"kind":"contract_main","name":"Gate","payable":false,"state":{"record":[{"name":"owner","type":"address"},{"name":"usedSwaps","type":"Gate.usedSwaps"},{"name":"swaps","type":"Gate.swaps"},{"name":"bridges","type":"Gate.bridges"},{"name":"oracle","type":{"bytes":20}}]},"type_defs":[{"name":"bridge","typedef":{"record":[{"name":"fromToken","type":"address"},{"name":"toToken","type":{"bytes":20}}]},"vars":[]},{"name":"swap","typedef":{"record":[{"name":"fromToken","type":"FungibleTokenInterface"},{"name":"toToken","type":{"bytes":20}},{"name":"sender","type":"address"},{"name":"recipient","type":{"bytes":20}},{"name":"amount","type":"int"},{"name":"nonce","type":"int"},{"name":"endtime","type":"int"},{"name":"withdrawn","type":"bool"},{"name":"refunded","type":"bool"},{"name":"signature","type":{"option":[{"bytes":65}]}}]},"vars":[]},{"name":"usedSwaps","typedef":{"map":["hash","bool"]},"vars":[]},{"name":"swaps","typedef":{"map":["hash","Gate.swap"]},"vars":[]},{"name":"bridges","typedef":{"map":["hash","Gate.bridge"]},"vars":[]}]}},"externalEncodedAci":[{"namespace":{"name":"ListInternal","type_defs":[]}},{"namespace":{"name":"List","type_defs":[]}},{"namespace":{"name":"Option","type_defs":[]}},{"namespace":{"name":"String","type_defs":[]}},{"namespace":{"name":"Pair","type_defs":[]}},{"contract":{"event":{"variant":[{"Transfer":["address","address","int"]},{"Allowance":["address","address","int"]},{"Burn":["address","int"]},{"Mint":["address","int"]},{"Swap":["address","int"]},{"NewOwner":["address"]}]},"functions":[{"arguments":[],"name":"aex9_extensions","payable":false,"returns":{"list":["string"]},"stateful":false},{"arguments":[],"name":"meta_info","payable":false,"returns":"FungibleTokenInterface.meta_info","stateful":false},{"arguments":[],"name":"total_supply","payable":false,"returns":"int","stateful":false},{"arguments":[],"name":"owner","payable":false,"returns":"address","stateful":false},{"arguments":[],"name":"balances","payable":false,"returns":{"map":["address","int"]},"stateful":false},{"arguments":[{"name":"_1","type":"address"}],"name":"balance","payable":false,"returns":{"option":["int"]},"stateful":false},{"arguments":[{"name":"_1","type":"FungibleTokenInterface.allowance_accounts"}],"name":"allowance","payable":false,"returns":{"option":["int"]},"stateful":false},{"arguments":[{"name":"_1","type":"address"},{"name":"_2","type":"address"},{"name":"_3","type":"int"}],"name":"transfer_allowance","payable":false,"returns":"unit","stateful":true},{"arguments":[{"name":"_1","type":"address"},{"name":"_2","type":"int"}],"name":"transfer","payable":false,"returns":"unit","stateful":true},{"arguments":[{"name":"_1","type":"address"},{"name":"_2","type":"int"}],"name":"mint","payable":false,"returns":"unit","stateful":true},{"arguments":[{"name":"_1","type":"int"}],"name":"burn","payable":false,"returns":"unit","stateful":true}],"kind":"contract_interface","name":"FungibleTokenInterface","payable":false,"type_defs":[{"name":"meta_info","typedef":{"record":[{"name":"name","type":"string"},{"name":"symbol","type":"string"},{"name":"decimals","type":"int"}]},"vars":[]},{"name":"allowance_accounts","typedef":{"record":[{"name":"from_account","type":"address"},{"name":"for_account","type":"address"}]},"vars":[]}]}}],"interface":"\n\n\n\n\ncontract interface FungibleTokenInterface =\n  datatype event = Transfer(address, address, int) | Allowance(address, address, int) | Burn(address, int) | Mint(address, int) | Swap(address, int) | NewOwner(address)\n  record meta_info = {name : string,symbol : string,decimals : int}\n  record allowance_accounts = {from_account : address,for_account : address}\n  entrypoint aex9_extensions : () => list(string)\n  entrypoint meta_info : () => FungibleTokenInterface.meta_info\n  entrypoint total_supply : () => int\n  entrypoint owner : () => address\n  entrypoint balances : () => map(address, int)\n  entrypoint balance : (address) => option(int)\n  entrypoint allowance : (FungibleTokenInterface.allowance_accounts) => option(int)\n  stateful entrypoint transfer_allowance : (address, address, int) => unit\n  stateful entrypoint transfer : (address, int) => unit\n  stateful entrypoint mint : (address, int) => unit\n  stateful entrypoint burn : (int) => unit\n\nmain contract Gate =\n  record state = {owner : address,usedSwaps : Gate.usedSwaps,swaps : Gate.swaps,bridges : Gate.bridges,oracle : bytes(20)}\n  datatype event = FundEvent(hash, string) | FundCancelEvent(hash) | SwapSigned(hash, bytes(65)) | NewBridge(address, bytes(20)) | RemoveBridge(address, bytes(20)) | NewOracleEvent(bytes(20))\n  record bridge = {fromToken : address,toToken : bytes(20)}\n  record swap = {fromToken : FungibleTokenInterface,toToken : bytes(20),sender : address,recipient : bytes(20),amount : int,nonce : int,endtime : int,withdrawn : bool,refunded : bool,signature : option(bytes(65))}\n  type usedSwaps = map(hash, bool)\n  type swaps = map(hash, Gate.swap)\n  type bridges = map(hash, Gate.bridge)\n  entrypoint init : (bytes(20)) => Gate.state\n  stateful entrypoint set_oracle : (bytes(20)) => unit\n  stateful entrypoint get_oracle : () => bytes(20)\n  entrypoint get_unsigned_msg : (hash) => hash\n  stateful entrypoint claim : (hash, bytes(20), address, bytes(20), address, int, int, bytes(65)) => unit\n  stateful entrypoint fund : (FungibleTokenInterface, bytes(20), bytes(20), int, int, int) => hash\n  stateful entrypoint fund_cancel : (hash) => unit\n  stateful entrypoint sign : (hash, bytes(65)) => unit\n  entrypoint get_swap : (hash) => option(Gate.swap)\n  entrypoint have_swap : (hash) => bool\n  stateful entrypoint get_bridge_id : (FungibleTokenInterface, bytes(20)) => hash\n  stateful entrypoint have_bridge : (hash) => bool\n  stateful entrypoint add_bridge : (FungibleTokenInterface, bytes(20)) => unit\n  stateful entrypoint remove_bridge : (FungibleTokenInterface, bytes(20)) => unit\n"}}
