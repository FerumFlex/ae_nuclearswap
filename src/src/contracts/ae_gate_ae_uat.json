{"address":"ct_P7CLrRKLbatVkkzWZ6iidwE4XG4r4mdnLP5sSoaVyxvXvNhsh","bytecode":"cb_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AGeXQDcKRwKXKEcAlygHBwcXF4cCNwA3AZdvAQEChv6HoLS9ADcBl0A3AAwBAAIDEavpnj4mAAcMDAYDBgwBAAIDEZt1rlIPAm+CJs8rGhKGACnsEBL/LRqGhgAaCiKGKxiGACgMCCsYhgAoDAQMAwArGCIAKAwAAwD8EYShXaE3AkcABzcADwJvgibPDAEARPxzBAIEBAQCAgICBAMRZaXgD/sDYXRoaXMgc3dhcCBkb2VzIG5vdCBleGlzdP6Q41dQAjcANwBVACAgggcMBPsDXU9OTFlfT1dORVJfQ0FMTF9BTExPV0VEAQM//pt1rlICNwGXQDcAGgoAhlUAKxgAACgMBCMABwwWBgMEGgoGhisYBgAoDBAHDBQGAwgaCgyGKxgMACgMDgcMEgYDDBoKEoZYACsYEgAoDAwfAAcMEAEDP/sDiXJlZnVuZGFibGU6IGVuZHRpbWUgbm90IHlldCBwYXNzZWT7A3VyZWZ1bmRhYmxlOiBhbHJlYWR5IHdpdGhkcmF3bvsDcXJlZnVuZGFibGU6IGFscmVhZHkgcmVmdW5kZWT7A1lyZWZ1bmRhYmxlOiBub3Qgc2VuZGVy/qNfG78ANwGXQIcCNwA3ATcKRwKXKEcAlygHBwcXF4cCNwA3AZdvARoKAIYvGIYABwwEAQOvggABAD8rGAAARPwjAAICAgD+q+mePgA3AZdAFy8YhgAA/q0oNG8ANwGXKDcAAgMRkONXUA8Cb4ImzxoGigAMAQBE/HMEAgQEBAICCgIEAxFlpeAP/rOIgD8ANwiXQJcoRwCXKEcABweXbwE3ABoKAIQs2AAAfyAwfwcMBPsDXVN3YXAgc2hvdWxkIG5vdCBiZSB1c2VkgAYGBDwEBBwAQQYIAkEaCggGPAQIHABBCgwKOwQKHABBCg4MOwQMHABBChAOHAoSECAYEgAHDAj7A1FTd2FwX2lkIGlzIG5vdCB2YWxpZAwBDgwCigwBAAIDEdvncpZ+AAcMDvsDWVNpZ25hdHVyZSBpcyBub3QgdmFsaWQMAQoMAQgMAwAMAgYDAPwRz92aojcCRwAHNwAPAm+CJs8t2oSEAP8BAz/+2+dylgA3AZdAl0BBHJ8BcRlFdGhlcmV1bSBTaWduZWQgTWVzc2FnZToKMzIAGwAAuQGrLxkRC+lGNh1nZXRfZmVlESAEpNg9LlN0cmluZy5jb25jYXRzEScAWkMtaGF2ZV9icmlkZ2UROlGqI2EuR2F0ZS5jaGVja193aXRoZHJhd2FibGURRNZEHxFpbml0EUqvo0MRZnVuZBFLGcPPUS5HYXRlLmZ1dHVyZV9lbmR0aW1lEVtpEh41cmVtb3ZlX2JyaWRnZRFcYgKyKWFkZF9icmlkZ2URXnfhJS0uTGlzdC5mb2xkbBFlpeAPLUNoYWluLmV2ZW50EXFeznMdc2V0X2ZlZRFyXf8TNWdldF9icmlkZ2VfaWQRgcqPoRFzaWduEYSJbQApZ2V0X29yYWNsZRGE/FOhGS5eMTQ4OBGFDk5vFXN3YXBzEYegtL0tZnVuZF9jYW5jZWwRkONXUE0uR2F0ZS5yZXF1aXJlX293bmVyEZt1rlJZLkdhdGUuY2hlY2tfcmVmdW5kYWJsZRGjXxu/IWdldF9zd2FwEavpnj4laGF2ZV9zd2FwEa0oNG8pc2V0X29yYWNsZRGziIA/FWNsYWltEdvncpZBZ2V0X3Vuc2lnbmVkX21zZ4IvAIU2LjEuMAA8iiit","aci":{"encodedAci":{"contract":{"event":{"variant":[{"FundEvent":["hash","string"]},{"FundCancelEvent":["hash"]},{"SwapSigned":["hash",{"bytes":65}]},{"NewBridge":["address",{"bytes":20}]},{"RemoveBridge":["address",{"bytes":20}]},{"NewOracleEvent":[{"bytes":20}]},{"NewFee":["int"]}]},"functions":[{"arguments":[{"name":"_oracle","type":{"bytes":20}}],"name":"init","payable":false,"returns":"Gate.state","stateful":false},{"arguments":[{"name":"_oracle","type":{"bytes":20}}],"name":"set_oracle","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[],"name":"get_oracle","payable":false,"returns":{"bytes":20},"stateful":true},{"arguments":[{"name":"data","type":"hash"}],"name":"get_unsigned_msg","payable":false,"returns":"hash","stateful":false},{"arguments":[{"name":"swapId","type":"hash"},{"name":"fromToken","type":{"bytes":20}},{"name":"toToken","type":"address"},{"name":"sender","type":{"bytes":20}},{"name":"recipient","type":"address"},{"name":"amount","type":"int"},{"name":"nonce","type":"int"},{"name":"signature","type":{"bytes":65}}],"name":"claim","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"fromToken","type":"FungibleTokenInterface"},{"name":"toToken","type":{"bytes":20}},{"name":"recipient","type":{"bytes":20}},{"name":"amount","type":"int"},{"name":"nonce","type":"int"},{"name":"endtime","type":"int"}],"name":"fund","payable":true,"returns":"hash","stateful":true},{"arguments":[{"name":"swapId","type":"hash"}],"name":"fund_cancel","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"swapId","type":"hash"},{"name":"signature","type":{"bytes":65}}],"name":"sign","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"swap_id","type":"hash"}],"name":"get_swap","payable":false,"returns":{"option":["Gate.swap"]},"stateful":false},{"arguments":[{"name":"swap_id","type":"hash"}],"name":"have_swap","payable":false,"returns":"bool","stateful":false},{"arguments":[],"name":"swaps","payable":false,"returns":"Gate.swaps","stateful":false},{"arguments":[],"name":"get_fee","payable":false,"returns":"int","stateful":false},{"arguments":[{"name":"new_fee","type":"int"}],"name":"set_fee","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"fromToken","type":"FungibleTokenInterface"},{"name":"toToken","type":{"bytes":20}}],"name":"get_bridge_id","payable":false,"returns":"hash","stateful":true},{"arguments":[{"name":"bridge_id","type":"hash"}],"name":"have_bridge","payable":false,"returns":"bool","stateful":true},{"arguments":[{"name":"fromToken","type":"FungibleTokenInterface"},{"name":"toToken","type":{"bytes":20}}],"name":"add_bridge","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"fromToken","type":"FungibleTokenInterface"},{"name":"toToken","type":{"bytes":20}}],"name":"remove_bridge","payable":false,"returns":{"tuple":[]},"stateful":true}],"kind":"contract_main","name":"Gate","payable":false,"state":{"record":[{"name":"owner","type":"address"},{"name":"usedSwaps","type":"Gate.usedSwaps"},{"name":"swaps","type":"Gate.swaps"},{"name":"bridges","type":"Gate.bridges"},{"name":"oracle","type":{"bytes":20}},{"name":"fee","type":"int"}]},"type_defs":[{"name":"bridge","typedef":{"record":[{"name":"fromToken","type":"address"},{"name":"toToken","type":{"bytes":20}}]},"vars":[]},{"name":"swap","typedef":{"record":[{"name":"fromToken","type":"FungibleTokenInterface"},{"name":"toToken","type":{"bytes":20}},{"name":"sender","type":"address"},{"name":"recipient","type":{"bytes":20}},{"name":"amount","type":"int"},{"name":"nonce","type":"int"},{"name":"endtime","type":"int"},{"name":"withdrawn","type":"bool"},{"name":"refunded","type":"bool"},{"name":"signature","type":{"option":[{"bytes":65}]}}]},"vars":[]},{"name":"usedSwaps","typedef":{"map":["hash","bool"]},"vars":[]},{"name":"swaps","typedef":{"map":["hash","Gate.swap"]},"vars":[]},{"name":"bridges","typedef":{"map":["hash","Gate.bridge"]},"vars":[]}]}},"externalEncodedAci":[{"namespace":{"name":"ListInternal","type_defs":[]}},{"namespace":{"name":"List","type_defs":[]}},{"namespace":{"name":"Option","type_defs":[]}},{"namespace":{"name":"String","type_defs":[]}},{"namespace":{"name":"Pair","type_defs":[]}},{"contract":{"event":{"variant":[{"Transfer":["address","address","int"]},{"Allowance":["address","address","int"]},{"Burn":["address","int"]},{"Mint":["address","int"]},{"Swap":["address","int"]},{"NewOwner":["address"]}]},"functions":[{"arguments":[],"name":"aex9_extensions","payable":false,"returns":{"list":["string"]},"stateful":false},{"arguments":[],"name":"meta_info","payable":false,"returns":"FungibleTokenInterface.meta_info","stateful":false},{"arguments":[],"name":"total_supply","payable":false,"returns":"int","stateful":false},{"arguments":[],"name":"owner","payable":false,"returns":"address","stateful":false},{"arguments":[],"name":"balances","payable":false,"returns":{"map":["address","int"]},"stateful":false},{"arguments":[{"name":"_1","type":"address"}],"name":"balance","payable":false,"returns":{"option":["int"]},"stateful":false},{"arguments":[{"name":"_1","type":"FungibleTokenInterface.allowance_accounts"}],"name":"allowance","payable":false,"returns":{"option":["int"]},"stateful":false},{"arguments":[{"name":"_1","type":"address"},{"name":"_2","type":"address"},{"name":"_3","type":"int"}],"name":"transfer_allowance","payable":false,"returns":"unit","stateful":true},{"arguments":[{"name":"_1","type":"address"},{"name":"_2","type":"int"}],"name":"transfer","payable":false,"returns":"unit","stateful":true},{"arguments":[{"name":"_1","type":"address"},{"name":"_2","type":"int"}],"name":"mint","payable":false,"returns":"unit","stateful":true},{"arguments":[{"name":"_1","type":"int"}],"name":"burn","payable":false,"returns":"unit","stateful":true}],"kind":"contract_interface","name":"FungibleTokenInterface","payable":false,"type_defs":[{"name":"meta_info","typedef":{"record":[{"name":"name","type":"string"},{"name":"symbol","type":"string"},{"name":"decimals","type":"int"}]},"vars":[]},{"name":"allowance_accounts","typedef":{"record":[{"name":"from_account","type":"address"},{"name":"for_account","type":"address"}]},"vars":[]}]}}],"interface":"\n\n\n\n\ncontract interface FungibleTokenInterface =\n  datatype event = Transfer(address, address, int) | Allowance(address, address, int) | Burn(address, int) | Mint(address, int) | Swap(address, int) | NewOwner(address)\n  record meta_info = {name : string,symbol : string,decimals : int}\n  record allowance_accounts = {from_account : address,for_account : address}\n  entrypoint aex9_extensions : () => list(string)\n  entrypoint meta_info : () => FungibleTokenInterface.meta_info\n  entrypoint total_supply : () => int\n  entrypoint owner : () => address\n  entrypoint balances : () => map(address, int)\n  entrypoint balance : (address) => option(int)\n  entrypoint allowance : (FungibleTokenInterface.allowance_accounts) => option(int)\n  stateful entrypoint transfer_allowance : (address, address, int) => unit\n  stateful entrypoint transfer : (address, int) => unit\n  stateful entrypoint mint : (address, int) => unit\n  stateful entrypoint burn : (int) => unit\n\nmain contract Gate =\n  record state = {owner : address,usedSwaps : Gate.usedSwaps,swaps : Gate.swaps,bridges : Gate.bridges,oracle : bytes(20),fee : int}\n  datatype event = FundEvent(hash, string) | FundCancelEvent(hash) | SwapSigned(hash, bytes(65)) | NewBridge(address, bytes(20)) | RemoveBridge(address, bytes(20)) | NewOracleEvent(bytes(20)) | NewFee(int)\n  record bridge = {fromToken : address,toToken : bytes(20)}\n  record swap = {fromToken : FungibleTokenInterface,toToken : bytes(20),sender : address,recipient : bytes(20),amount : int,nonce : int,endtime : int,withdrawn : bool,refunded : bool,signature : option(bytes(65))}\n  type usedSwaps = map(hash, bool)\n  type swaps = map(hash, Gate.swap)\n  type bridges = map(hash, Gate.bridge)\n  entrypoint init : (bytes(20)) => Gate.state\n  stateful entrypoint set_oracle : (bytes(20)) => unit\n  stateful entrypoint get_oracle : () => bytes(20)\n  entrypoint get_unsigned_msg : (hash) => hash\n  stateful entrypoint claim : (hash, bytes(20), address, bytes(20), address, int, int, bytes(65)) => unit\n  payable stateful entrypoint fund : (FungibleTokenInterface, bytes(20), bytes(20), int, int, int) => hash\n  stateful entrypoint fund_cancel : (hash) => unit\n  stateful entrypoint sign : (hash, bytes(65)) => unit\n  entrypoint get_swap : (hash) => option(Gate.swap)\n  entrypoint have_swap : (hash) => bool\n  entrypoint swaps : () => Gate.swaps\n  entrypoint get_fee : () => int\n  stateful entrypoint set_fee : (int) => unit\n  stateful entrypoint get_bridge_id : (FungibleTokenInterface, bytes(20)) => hash\n  stateful entrypoint have_bridge : (hash) => bool\n  stateful entrypoint add_bridge : (FungibleTokenInterface, bytes(20)) => unit\n  stateful entrypoint remove_bridge : (FungibleTokenInterface, bytes(20)) => unit\n"}}
