{"address":"ct_2CRx6cv6vtk7vTcs3dQyWnxRNHHbWKn6YXqhBu4RWR2TEHksSd","bytecode":"cb_+QiuRgOg6+r1mdCpa0pDPvMP3a4jY+c26ADnPnTzoIGEq/0X3s7AuQiAuQbX/gCijLwCNwGXQDcAKxoAggBVACgsBgAgAAcMBPsDWXJlZnVuZGFibGU6IG5vdCBzZW5kZXIoLBAAIDB/BwwI+wNxcmVmdW5kYWJsZTogYWxyZWFkeSByZWZ1bmRlZCgsDgAgMH8HDAz7A3VyZWZ1bmRhYmxlOiBhbHJlYWR5IHdpdGhkcmF3blgAKCwKACEABwwQ+wOJcmVmdW5kYWJsZTogZW5kdGltZSBub3QgeWV0IHBhc3NlZAEDP/4RVv+AAjcBl0A3AAwBAAIDEV4oqBsHDAb7A4Vsb2NrZWRfY29udHJhY3RfaWQgZG9lcyBub3QgZXhpc3QBAz/+HV/sRwA3AZdAhwI3ADcBNwpHApdARwBHAHcHBxcXdxoKAIIvGIIABwwEAQOvggABAD8rGAAARPwjAAICAgD+IASk2AI3ASd3dzMEAAcMBDYEADUEAAwDKxFgtnqfPwQDEV534SUBA1/+JD/bEQI3A+cANwJ394cCNwA3AecB5wAIPQQCBAEBAEY0BAAoHAICKBwAAgQA/kEPzJ0ANwKXQHcXDAEAAgMREVb/gA8Cb4ImzwwBAgwBAAIDEXDlx7QPAm+CJs8MAQACAxH5XXvADwJvgibPKxoIggApbBIIAi0agoIAKxoKggAp7A4K/y0agoIAKxoKggAoLAwKKCwECgwDACgsAAoDAPwRhKFdoTcCRwAHNwAPAm+CJs8MAQBE/DMGAgICAgIDEWWl4A8PAm+CJs8BA//+RNZEHwA3ADcAGg6CLwABAz/+Sq+jQwA3BkcCl0BHAHcHB5dADAEKVQAMAQACAxH8LTCNDwJvgibPDAEIAgMRsU7KJg8Cb4Imz1UCBDsECjQwAzsECDQAPAgENAA8BAQ0AEAEAjQAdgQAPAA0AAIDESAEpNgcAggMAggCAxFeKKgbBwwSBgMMDAEKXgAMAgQMAwAMAQADAPwRId/6tjcDRwBHAAc3AA8Cb4ImzwwBAAwBAgwBBAwCBAwBBgwBCAwBCgwDfwwDfwwDXycMFC0qgoIIDAIIDAEEDAIERPwzBgICAAYCAxFlpeAPDwJvgibPAQII+wONdGhpcyBsb2NrZWQgY29udHJhY3QgYWxyZWFkeSBleGlzdHP+XiioGwA3AZdAFy8YggAA/l534SUCNwM3Anf35wAn5wHnADMEBAcMBjUEBAwBAigcAgAoHAAAAgAPAQI2BQQEBgMAAQEC/mC2ep8CNwP39/f3OhQCBAD+ZaXgDwI3AYcDNwOXQEcARwA3AZdANwGXQDcACf0AAgQGRjYAAABGNgIAAkY2BAAEZAKvX58BgZx7ZSxsHi5w+l4DdPAfUWxLZ05aEc3M3/jgZarCra/lAAIEAQM/RjYAAABiL1+fAYEUTHGxzn/Fh5rHcut9LUL1CYcVkX6GgIeBEzWN9wRITwABAz9GNgAAAGIvX58BgdwNFS85r7uhb3vBAQB7DjVBWNOoaWL/doNfhvnQY718AAEDP/5w5ce0AjcCl0B3NwArGgCCABwEAigsAgAgAAcMBPsDfXNlY3JldCBoYXNoIGhhc2ggZG9lcyBub3QgbWF0Y2gBAz/+iE+sLQI3Avf39wEBAv6IyYeuADcAZ5dANwpHApdARwBHAHcHBxcXdwECgv6lpHRBADcBl0AXDAEAAgMREVb/gA8Cb4ImzwwBAAIDEQCijLwPAm+CJs8rGgaCACnsEAb/LRqCggArGgaCACgsDAYoLAYGDAMAKCwABgMA/BGEoV2hNwJHAAc3AA8Cb4ImzwwBAET8MwYCAgQCAgMRZaXgDw8Cb4ImzwED//6xTsomAjcBBzcAWAAfBAAHDAT7A4llbmR0aW1lIHRpbWUgbXVzdCBiZSBpbiB0aGUgZnV0dXJlAQM//u/LUO8CNwLnAIcCNwA3AecA5wAMAQIMAysRiE+sLT8MAQAEAxEkP9sR/vlde8ACNwGXQDcAKxoAggBVACgsBAAgAAcMBPsDbXdpdGhkcmF3YWJsZTogbm90IHJlY2lwaWVudCgsDgAgMH8HDAj7A313aXRoZHJhd2FibGU6IGFscmVhZHkgd2l0aGRyYXduKCwQACAwfwcMDPsDeXdpdGhkcmF3YWJsZTogYWxyZWFkeSByZWZ1bmRlZAEDP/78LTCNAjcDRwJHAAc3AB80BAAHDAT7A2F0b2tlbiBhbW91bnQgbXVzdCBiZSA+IDAMAQJeACcMBAwDAAwBAAMA/BFqABZeNwE3AkcARwCHAjcANwEHDAMAAgMR78tQ7w8CBCIYBAQHDAz7A4V0b2tlbiBhbGxvd2FuY2UgbXVzdCBiZSA+PSBhbW91bnQBAz+5AaAvFBEAooy8QS5IVExDLnJlZnVuZGFibGUREVb/gHkuSFRMQy5pc19sb2NrZWRfY29udHJhY3RfZXhpc3QRHV/sR01nZXRfbG9ja2VkX2NvbnRyYWN0ESAEpNg9LlN0cmluZy5jb25jYXRzESQ/2xE1Lk9wdGlvbi5tYXRjaBFBD8ydIXdpdGhkcmF3EUTWRB8RaW5pdBFKr6NDEWZ1bmQRXiioG1FoYXZlX2xvY2tlZF9jb250cmFjdBFed+ElLS5MaXN0LmZvbGRsEWC2ep8VLl40MDYRZaXgDy1DaGFpbi5ldmVudBFw5ce0fS5IVExDLmNoZWNrX3NlY3JldF9oYXNoX21hdGNoZXMRiE+sLRUuXjQwNRGIyYeuQWxvY2tlZF9jb250cmFjdHMRpaR0QRlyZWZ1bmQRsU7KJlEuSFRMQy5mdXR1cmVfZW5kdGltZRHvy1DvPS5PcHRpb24uZGVmYXVsdBH5XXvASS5IVExDLndpdGhkcmF3YWJsZRH8LTCNbS5IVExDLmlzX3Rva2VuX3RyYW5zZmVyYWJsZYIvAIU2LjEuMAC51UNt","aci":{"encodedAci":{"contract":{"event":{"variant":[{"Log_fund":["hash","address","address"]},{"Log_withdraw":["hash"]},{"Log_refund":["hash"]}]},"functions":[{"arguments":[],"name":"init","payable":false,"returns":"HTLC.state","stateful":false},{"arguments":[],"name":"locked_contracts","payable":false,"returns":"HTLC.locked_contracts","stateful":false},{"arguments":[{"name":"token","type":"FungibleTokenInterface"},{"name":"secret_hash","type":"hash"},{"name":"recipient","type":"address"},{"name":"eth_address","type":"string"},{"name":"endtime","type":"int"},{"name":"amount","type":"int"}],"name":"fund","payable":false,"returns":"hash","stateful":true},{"arguments":[{"name":"locked_contract_id","type":"hash"},{"name":"preimage","type":"string"}],"name":"withdraw","payable":false,"returns":"bool","stateful":true},{"arguments":[{"name":"locked_contract_id","type":"hash"}],"name":"refund","payable":false,"returns":"bool","stateful":true},{"arguments":[{"name":"locked_contract_id","type":"hash"}],"name":"get_locked_contract","payable":false,"returns":{"option":["HTLC.lockContract"]},"stateful":false},{"arguments":[{"name":"locked_contract_id","type":"hash"}],"name":"have_locked_contract","payable":false,"returns":"bool","stateful":false}],"kind":"contract_main","name":"HTLC","payable":false,"state":{"record":[{"name":"locked_contracts","type":"HTLC.locked_contracts"}]},"type_defs":[{"name":"lockContract","typedef":{"record":[{"name":"token","type":"FungibleTokenInterface"},{"name":"secret_hash","type":"hash"},{"name":"recipient","type":"address"},{"name":"sender","type":"address"},{"name":"eth_address","type":"string"},{"name":"endtime","type":"int"},{"name":"amount","type":"int"},{"name":"withdrawn","type":"bool"},{"name":"refunded","type":"bool"},{"name":"preimage","type":"string"}]},"vars":[]},{"name":"locked_contracts","typedef":{"map":["hash","HTLC.lockContract"]},"vars":[]}]}},"externalEncodedAci":[{"namespace":{"name":"ListInternal","type_defs":[]}},{"namespace":{"name":"List","type_defs":[]}},{"namespace":{"name":"Option","type_defs":[]}},{"namespace":{"name":"String","type_defs":[]}},{"contract":{"event":{"variant":[{"Transfer":["address","address","int"]},{"Allowance":["address","address","int"]}]},"functions":[{"arguments":[],"name":"aex9_extensions","payable":false,"returns":{"list":["string"]},"stateful":false},{"arguments":[],"name":"meta_info","payable":false,"returns":"FungibleTokenInterface.meta_info","stateful":false},{"arguments":[],"name":"total_supply","payable":false,"returns":"int","stateful":false},{"arguments":[],"name":"owner","payable":false,"returns":"address","stateful":false},{"arguments":[],"name":"balances","payable":false,"returns":{"map":["address","int"]},"stateful":false},{"arguments":[{"name":"_1","type":"address"}],"name":"balance","payable":false,"returns":{"option":["int"]},"stateful":false},{"arguments":[{"name":"_1","type":"FungibleTokenInterface.allowance_accounts"}],"name":"allowance","payable":false,"returns":{"option":["int"]},"stateful":false},{"arguments":[{"name":"_1","type":"address"},{"name":"_2","type":"address"},{"name":"_3","type":"int"}],"name":"transfer_allowance","payable":false,"returns":"unit","stateful":true},{"arguments":[{"name":"_1","type":"address"},{"name":"_2","type":"int"}],"name":"transfer","payable":false,"returns":"unit","stateful":true}],"kind":"contract_interface","name":"FungibleTokenInterface","payable":false,"type_defs":[{"name":"meta_info","typedef":{"record":[{"name":"name","type":"string"},{"name":"symbol","type":"string"},{"name":"decimals","type":"int"}]},"vars":[]},{"name":"allowance_accounts","typedef":{"record":[{"name":"from_account","type":"address"},{"name":"for_account","type":"address"}]},"vars":[]}]}}],"interface":"\n\n\n\ncontract interface FungibleTokenInterface =\n  datatype event = Transfer(address, address, int) | Allowance(address, address, int)\n  record meta_info = {name : string,symbol : string,decimals : int}\n  record allowance_accounts = {from_account : address,for_account : address}\n  entrypoint aex9_extensions : () => list(string)\n  entrypoint meta_info : () => FungibleTokenInterface.meta_info\n  entrypoint total_supply : () => int\n  entrypoint owner : () => address\n  entrypoint balances : () => map(address, int)\n  entrypoint balance : (address) => option(int)\n  entrypoint allowance : (FungibleTokenInterface.allowance_accounts) => option(int)\n  stateful entrypoint transfer_allowance : (address, address, int) => unit\n  stateful entrypoint transfer : (address, int) => unit\n\nmain contract HTLC =\n  record state = {locked_contracts : HTLC.locked_contracts}\n  datatype event = Log_fund(hash, address, address) | Log_withdraw(hash) | Log_refund(hash)\n  record lockContract = {token : FungibleTokenInterface,secret_hash : hash,recipient : address,sender : address,eth_address : string,endtime : int,amount : int,withdrawn : bool,refunded : bool,preimage : string}\n  type locked_contracts = map(hash, HTLC.lockContract)\n  entrypoint init : () => HTLC.state\n  entrypoint locked_contracts : () => HTLC.locked_contracts\n  stateful entrypoint fund : (FungibleTokenInterface, hash, address, string, int, int) => hash\n  stateful entrypoint withdraw : (hash, string) => bool\n  stateful entrypoint refund : (hash) => bool\n  entrypoint get_locked_contract : (hash) => option(HTLC.lockContract)\n  entrypoint have_locked_contract : (hash) => bool\n"}}
